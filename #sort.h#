#ifndef SORT_H
#define SORT_H

#include <stdlib.h>
#include <stdio.h>

void print_array(const int *array, size_t size);

/**
 * struct listint_s - Doubly linked list node
 *
 * @n: Integer stored in the node
 * @prev: Pointer to the previous element of the list
 * @next: Pointer to the next element of the list
 */
typedef struct listint_s
{
    const int n;
    struct listint_s *prev;
    struct listint_s *next;
} listint_t;

void print_list(const listint_t *list);
void bubble_sort(int *array, size_t size);
void insertion_sort_list(listint_t **list);
void selection_sort(int *array, size_t size);

#include "sort.h"

/**
 * swap: swaps positions of two elements in an array
 * @array: the array to swap elements in
 * @pos1: first position
 * @pos2: second position
 */
void swap(int *array, int pos1, int pos2)
{
    int temp = array[pos1];
    array[pos1] = array[pos2];
    array[pos2] = temp;
}

/**
 * insertion_sort: sorts an array using the insertion sort algorithm
 * @array: the array to be sorted
 * @size: size of the array
 */
void insertion_sort(int *array, size_t size)
{
    size_t i, j;

    for (i = 1; i < size; i++)
    {
        j = i;
        while (j > 0 && array[j - 1] > array[j])
        {
            swap(array, j, j - 1);
            j--;
        }
        print_array(array, size);
    }
}


#endif
